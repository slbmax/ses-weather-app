// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mock

import (
	"github.com/slbmax/ses-weather-app/internal/mailer"
	mock "github.com/stretchr/testify/mock"
)

// NewMockMailer creates a new instance of MockMailer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockMailer(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockMailer {
	mock := &MockMailer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockMailer is an autogenerated mock type for the Mailer type
type MockMailer struct {
	mock.Mock
}

type MockMailer_Expecter struct {
	mock *mock.Mock
}

func (_m *MockMailer) EXPECT() *MockMailer_Expecter {
	return &MockMailer_Expecter{mock: &_m.Mock}
}

// SendConfirmationEmail provides a mock function for the type MockMailer
func (_mock *MockMailer) SendConfirmationEmail(to string, email mailer.ConfirmationEmail) error {
	ret := _mock.Called(to, email)

	if len(ret) == 0 {
		panic("no return value specified for SendConfirmationEmail")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(string, mailer.ConfirmationEmail) error); ok {
		r0 = returnFunc(to, email)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockMailer_SendConfirmationEmail_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendConfirmationEmail'
type MockMailer_SendConfirmationEmail_Call struct {
	*mock.Call
}

// SendConfirmationEmail is a helper method to define mock.On call
//   - to
//   - email
func (_e *MockMailer_Expecter) SendConfirmationEmail(to interface{}, email interface{}) *MockMailer_SendConfirmationEmail_Call {
	return &MockMailer_SendConfirmationEmail_Call{Call: _e.mock.On("SendConfirmationEmail", to, email)}
}

func (_c *MockMailer_SendConfirmationEmail_Call) Run(run func(to string, email mailer.ConfirmationEmail)) *MockMailer_SendConfirmationEmail_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(mailer.ConfirmationEmail))
	})
	return _c
}

func (_c *MockMailer_SendConfirmationEmail_Call) Return(err error) *MockMailer_SendConfirmationEmail_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockMailer_SendConfirmationEmail_Call) RunAndReturn(run func(to string, email mailer.ConfirmationEmail) error) *MockMailer_SendConfirmationEmail_Call {
	_c.Call.Return(run)
	return _c
}

// SendConfirmationSuccessEmail provides a mock function for the type MockMailer
func (_mock *MockMailer) SendConfirmationSuccessEmail(to string, message mailer.ConfirmationSuccessEmail) error {
	ret := _mock.Called(to, message)

	if len(ret) == 0 {
		panic("no return value specified for SendConfirmationSuccessEmail")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(string, mailer.ConfirmationSuccessEmail) error); ok {
		r0 = returnFunc(to, message)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockMailer_SendConfirmationSuccessEmail_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendConfirmationSuccessEmail'
type MockMailer_SendConfirmationSuccessEmail_Call struct {
	*mock.Call
}

// SendConfirmationSuccessEmail is a helper method to define mock.On call
//   - to
//   - message
func (_e *MockMailer_Expecter) SendConfirmationSuccessEmail(to interface{}, message interface{}) *MockMailer_SendConfirmationSuccessEmail_Call {
	return &MockMailer_SendConfirmationSuccessEmail_Call{Call: _e.mock.On("SendConfirmationSuccessEmail", to, message)}
}

func (_c *MockMailer_SendConfirmationSuccessEmail_Call) Run(run func(to string, message mailer.ConfirmationSuccessEmail)) *MockMailer_SendConfirmationSuccessEmail_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(mailer.ConfirmationSuccessEmail))
	})
	return _c
}

func (_c *MockMailer_SendConfirmationSuccessEmail_Call) Return(err error) *MockMailer_SendConfirmationSuccessEmail_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockMailer_SendConfirmationSuccessEmail_Call) RunAndReturn(run func(to string, message mailer.ConfirmationSuccessEmail) error) *MockMailer_SendConfirmationSuccessEmail_Call {
	_c.Call.Return(run)
	return _c
}

// SendNotificationEmail provides a mock function for the type MockMailer
func (_mock *MockMailer) SendNotificationEmail(to string, email mailer.NotificationEmail) error {
	ret := _mock.Called(to, email)

	if len(ret) == 0 {
		panic("no return value specified for SendNotificationEmail")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(string, mailer.NotificationEmail) error); ok {
		r0 = returnFunc(to, email)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockMailer_SendNotificationEmail_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendNotificationEmail'
type MockMailer_SendNotificationEmail_Call struct {
	*mock.Call
}

// SendNotificationEmail is a helper method to define mock.On call
//   - to
//   - email
func (_e *MockMailer_Expecter) SendNotificationEmail(to interface{}, email interface{}) *MockMailer_SendNotificationEmail_Call {
	return &MockMailer_SendNotificationEmail_Call{Call: _e.mock.On("SendNotificationEmail", to, email)}
}

func (_c *MockMailer_SendNotificationEmail_Call) Run(run func(to string, email mailer.NotificationEmail)) *MockMailer_SendNotificationEmail_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(mailer.NotificationEmail))
	})
	return _c
}

func (_c *MockMailer_SendNotificationEmail_Call) Return(err error) *MockMailer_SendNotificationEmail_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockMailer_SendNotificationEmail_Call) RunAndReturn(run func(to string, email mailer.NotificationEmail) error) *MockMailer_SendNotificationEmail_Call {
	_c.Call.Return(run)
	return _c
}
