// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mock

import (
	"time"

	"github.com/slbmax/ses-weather-app/internal/database"
	mock "github.com/stretchr/testify/mock"
)

// NewMockSubscriptionsQ creates a new instance of MockSubscriptionsQ. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockSubscriptionsQ(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockSubscriptionsQ {
	mock := &MockSubscriptionsQ{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockSubscriptionsQ is an autogenerated mock type for the SubscriptionsQ type
type MockSubscriptionsQ struct {
	mock.Mock
}

type MockSubscriptionsQ_Expecter struct {
	mock *mock.Mock
}

func (_m *MockSubscriptionsQ) EXPECT() *MockSubscriptionsQ_Expecter {
	return &MockSubscriptionsQ_Expecter{mock: &_m.Mock}
}

// DeleteByToken provides a mock function for the type MockSubscriptionsQ
func (_mock *MockSubscriptionsQ) DeleteByToken(token string) error {
	ret := _mock.Called(token)

	if len(ret) == 0 {
		panic("no return value specified for DeleteByToken")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(string) error); ok {
		r0 = returnFunc(token)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockSubscriptionsQ_DeleteByToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteByToken'
type MockSubscriptionsQ_DeleteByToken_Call struct {
	*mock.Call
}

// DeleteByToken is a helper method to define mock.On call
//   - token
func (_e *MockSubscriptionsQ_Expecter) DeleteByToken(token interface{}) *MockSubscriptionsQ_DeleteByToken_Call {
	return &MockSubscriptionsQ_DeleteByToken_Call{Call: _e.mock.On("DeleteByToken", token)}
}

func (_c *MockSubscriptionsQ_DeleteByToken_Call) Run(run func(token string)) *MockSubscriptionsQ_DeleteByToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockSubscriptionsQ_DeleteByToken_Call) Return(err error) *MockSubscriptionsQ_DeleteByToken_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockSubscriptionsQ_DeleteByToken_Call) RunAndReturn(run func(token string) error) *MockSubscriptionsQ_DeleteByToken_Call {
	_c.Call.Return(run)
	return _c
}

// GetByToken provides a mock function for the type MockSubscriptionsQ
func (_mock *MockSubscriptionsQ) GetByToken(token string) (*database.Subscription, error) {
	ret := _mock.Called(token)

	if len(ret) == 0 {
		panic("no return value specified for GetByToken")
	}

	var r0 *database.Subscription
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string) (*database.Subscription, error)); ok {
		return returnFunc(token)
	}
	if returnFunc, ok := ret.Get(0).(func(string) *database.Subscription); ok {
		r0 = returnFunc(token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*database.Subscription)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string) error); ok {
		r1 = returnFunc(token)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockSubscriptionsQ_GetByToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByToken'
type MockSubscriptionsQ_GetByToken_Call struct {
	*mock.Call
}

// GetByToken is a helper method to define mock.On call
//   - token
func (_e *MockSubscriptionsQ_Expecter) GetByToken(token interface{}) *MockSubscriptionsQ_GetByToken_Call {
	return &MockSubscriptionsQ_GetByToken_Call{Call: _e.mock.On("GetByToken", token)}
}

func (_c *MockSubscriptionsQ_GetByToken_Call) Run(run func(token string)) *MockSubscriptionsQ_GetByToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockSubscriptionsQ_GetByToken_Call) Return(subscription *database.Subscription, err error) *MockSubscriptionsQ_GetByToken_Call {
	_c.Call.Return(subscription, err)
	return _c
}

func (_c *MockSubscriptionsQ_GetByToken_Call) RunAndReturn(run func(token string) (*database.Subscription, error)) *MockSubscriptionsQ_GetByToken_Call {
	_c.Call.Return(run)
	return _c
}

// Insert provides a mock function for the type MockSubscriptionsQ
func (_mock *MockSubscriptionsQ) Insert(subscription database.Subscription) (int64, error) {
	ret := _mock.Called(subscription)

	if len(ret) == 0 {
		panic("no return value specified for Insert")
	}

	var r0 int64
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(database.Subscription) (int64, error)); ok {
		return returnFunc(subscription)
	}
	if returnFunc, ok := ret.Get(0).(func(database.Subscription) int64); ok {
		r0 = returnFunc(subscription)
	} else {
		r0 = ret.Get(0).(int64)
	}
	if returnFunc, ok := ret.Get(1).(func(database.Subscription) error); ok {
		r1 = returnFunc(subscription)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockSubscriptionsQ_Insert_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Insert'
type MockSubscriptionsQ_Insert_Call struct {
	*mock.Call
}

// Insert is a helper method to define mock.On call
//   - subscription
func (_e *MockSubscriptionsQ_Expecter) Insert(subscription interface{}) *MockSubscriptionsQ_Insert_Call {
	return &MockSubscriptionsQ_Insert_Call{Call: _e.mock.On("Insert", subscription)}
}

func (_c *MockSubscriptionsQ_Insert_Call) Run(run func(subscription database.Subscription)) *MockSubscriptionsQ_Insert_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(database.Subscription))
	})
	return _c
}

func (_c *MockSubscriptionsQ_Insert_Call) Return(id int64, err error) *MockSubscriptionsQ_Insert_Call {
	_c.Call.Return(id, err)
	return _c
}

func (_c *MockSubscriptionsQ_Insert_Call) RunAndReturn(run func(subscription database.Subscription) (int64, error)) *MockSubscriptionsQ_Insert_Call {
	_c.Call.Return(run)
	return _c
}

// New provides a mock function for the type MockSubscriptionsQ
func (_mock *MockSubscriptionsQ) New() database.SubscriptionsQ {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for New")
	}

	var r0 database.SubscriptionsQ
	if returnFunc, ok := ret.Get(0).(func() database.SubscriptionsQ); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(database.SubscriptionsQ)
		}
	}
	return r0
}

// MockSubscriptionsQ_New_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'New'
type MockSubscriptionsQ_New_Call struct {
	*mock.Call
}

// New is a helper method to define mock.On call
func (_e *MockSubscriptionsQ_Expecter) New() *MockSubscriptionsQ_New_Call {
	return &MockSubscriptionsQ_New_Call{Call: _e.mock.On("New")}
}

func (_c *MockSubscriptionsQ_New_Call) Run(run func()) *MockSubscriptionsQ_New_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockSubscriptionsQ_New_Call) Return(subscriptionsQ database.SubscriptionsQ) *MockSubscriptionsQ_New_Call {
	_c.Call.Return(subscriptionsQ)
	return _c
}

func (_c *MockSubscriptionsQ_New_Call) RunAndReturn(run func() database.SubscriptionsQ) *MockSubscriptionsQ_New_Call {
	_c.Call.Return(run)
	return _c
}

// SelectToNotify provides a mock function for the type MockSubscriptionsQ
func (_mock *MockSubscriptionsQ) SelectToNotify() ([]database.Subscription, error) {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for SelectToNotify")
	}

	var r0 []database.Subscription
	var r1 error
	if returnFunc, ok := ret.Get(0).(func() ([]database.Subscription, error)); ok {
		return returnFunc()
	}
	if returnFunc, ok := ret.Get(0).(func() []database.Subscription); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]database.Subscription)
		}
	}
	if returnFunc, ok := ret.Get(1).(func() error); ok {
		r1 = returnFunc()
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockSubscriptionsQ_SelectToNotify_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SelectToNotify'
type MockSubscriptionsQ_SelectToNotify_Call struct {
	*mock.Call
}

// SelectToNotify is a helper method to define mock.On call
func (_e *MockSubscriptionsQ_Expecter) SelectToNotify() *MockSubscriptionsQ_SelectToNotify_Call {
	return &MockSubscriptionsQ_SelectToNotify_Call{Call: _e.mock.On("SelectToNotify")}
}

func (_c *MockSubscriptionsQ_SelectToNotify_Call) Run(run func()) *MockSubscriptionsQ_SelectToNotify_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockSubscriptionsQ_SelectToNotify_Call) Return(subscriptions []database.Subscription, err error) *MockSubscriptionsQ_SelectToNotify_Call {
	_c.Call.Return(subscriptions, err)
	return _c
}

func (_c *MockSubscriptionsQ_SelectToNotify_Call) RunAndReturn(run func() ([]database.Subscription, error)) *MockSubscriptionsQ_SelectToNotify_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateConfirmed provides a mock function for the type MockSubscriptionsQ
func (_mock *MockSubscriptionsQ) UpdateConfirmed(id int64, unsubscribeToken string) error {
	ret := _mock.Called(id, unsubscribeToken)

	if len(ret) == 0 {
		panic("no return value specified for UpdateConfirmed")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(int64, string) error); ok {
		r0 = returnFunc(id, unsubscribeToken)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockSubscriptionsQ_UpdateConfirmed_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateConfirmed'
type MockSubscriptionsQ_UpdateConfirmed_Call struct {
	*mock.Call
}

// UpdateConfirmed is a helper method to define mock.On call
//   - id
//   - unsubscribeToken
func (_e *MockSubscriptionsQ_Expecter) UpdateConfirmed(id interface{}, unsubscribeToken interface{}) *MockSubscriptionsQ_UpdateConfirmed_Call {
	return &MockSubscriptionsQ_UpdateConfirmed_Call{Call: _e.mock.On("UpdateConfirmed", id, unsubscribeToken)}
}

func (_c *MockSubscriptionsQ_UpdateConfirmed_Call) Run(run func(id int64, unsubscribeToken string)) *MockSubscriptionsQ_UpdateConfirmed_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int64), args[1].(string))
	})
	return _c
}

func (_c *MockSubscriptionsQ_UpdateConfirmed_Call) Return(err error) *MockSubscriptionsQ_UpdateConfirmed_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockSubscriptionsQ_UpdateConfirmed_Call) RunAndReturn(run func(id int64, unsubscribeToken string) error) *MockSubscriptionsQ_UpdateConfirmed_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateLastNotified provides a mock function for the type MockSubscriptionsQ
func (_mock *MockSubscriptionsQ) UpdateLastNotified(id int64, lastNotifiedAt time.Time) error {
	ret := _mock.Called(id, lastNotifiedAt)

	if len(ret) == 0 {
		panic("no return value specified for UpdateLastNotified")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(int64, time.Time) error); ok {
		r0 = returnFunc(id, lastNotifiedAt)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockSubscriptionsQ_UpdateLastNotified_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateLastNotified'
type MockSubscriptionsQ_UpdateLastNotified_Call struct {
	*mock.Call
}

// UpdateLastNotified is a helper method to define mock.On call
//   - id
//   - lastNotifiedAt
func (_e *MockSubscriptionsQ_Expecter) UpdateLastNotified(id interface{}, lastNotifiedAt interface{}) *MockSubscriptionsQ_UpdateLastNotified_Call {
	return &MockSubscriptionsQ_UpdateLastNotified_Call{Call: _e.mock.On("UpdateLastNotified", id, lastNotifiedAt)}
}

func (_c *MockSubscriptionsQ_UpdateLastNotified_Call) Run(run func(id int64, lastNotifiedAt time.Time)) *MockSubscriptionsQ_UpdateLastNotified_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int64), args[1].(time.Time))
	})
	return _c
}

func (_c *MockSubscriptionsQ_UpdateLastNotified_Call) Return(err error) *MockSubscriptionsQ_UpdateLastNotified_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockSubscriptionsQ_UpdateLastNotified_Call) RunAndReturn(run func(id int64, lastNotifiedAt time.Time) error) *MockSubscriptionsQ_UpdateLastNotified_Call {
	_c.Call.Return(run)
	return _c
}
