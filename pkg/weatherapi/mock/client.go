// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mock

import (
	"github.com/slbmax/ses-weather-app/pkg/weatherapi"
	mock "github.com/stretchr/testify/mock"
)

// NewMockWeatherProvider creates a new instance of MockWeatherProvider. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockWeatherProvider(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockWeatherProvider {
	mock := &MockWeatherProvider{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockWeatherProvider is an autogenerated mock type for the WeatherProvider type
type MockWeatherProvider struct {
	mock.Mock
}

type MockWeatherProvider_Expecter struct {
	mock *mock.Mock
}

func (_m *MockWeatherProvider) EXPECT() *MockWeatherProvider_Expecter {
	return &MockWeatherProvider_Expecter{mock: &_m.Mock}
}

// GetCurrentWeather provides a mock function for the type MockWeatherProvider
func (_mock *MockWeatherProvider) GetCurrentWeather(city string) (*weatherapi.WeatherCurrentResponse, error) {
	ret := _mock.Called(city)

	if len(ret) == 0 {
		panic("no return value specified for GetCurrentWeather")
	}

	var r0 *weatherapi.WeatherCurrentResponse
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string) (*weatherapi.WeatherCurrentResponse, error)); ok {
		return returnFunc(city)
	}
	if returnFunc, ok := ret.Get(0).(func(string) *weatherapi.WeatherCurrentResponse); ok {
		r0 = returnFunc(city)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*weatherapi.WeatherCurrentResponse)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string) error); ok {
		r1 = returnFunc(city)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockWeatherProvider_GetCurrentWeather_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCurrentWeather'
type MockWeatherProvider_GetCurrentWeather_Call struct {
	*mock.Call
}

// GetCurrentWeather is a helper method to define mock.On call
//   - city
func (_e *MockWeatherProvider_Expecter) GetCurrentWeather(city interface{}) *MockWeatherProvider_GetCurrentWeather_Call {
	return &MockWeatherProvider_GetCurrentWeather_Call{Call: _e.mock.On("GetCurrentWeather", city)}
}

func (_c *MockWeatherProvider_GetCurrentWeather_Call) Run(run func(city string)) *MockWeatherProvider_GetCurrentWeather_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockWeatherProvider_GetCurrentWeather_Call) Return(weatherCurrentResponse *weatherapi.WeatherCurrentResponse, err error) *MockWeatherProvider_GetCurrentWeather_Call {
	_c.Call.Return(weatherCurrentResponse, err)
	return _c
}

func (_c *MockWeatherProvider_GetCurrentWeather_Call) RunAndReturn(run func(city string) (*weatherapi.WeatherCurrentResponse, error)) *MockWeatherProvider_GetCurrentWeather_Call {
	_c.Call.Return(run)
	return _c
}
